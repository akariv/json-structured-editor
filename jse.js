// Generated by IcedCoffeeScript 1.2.0i
(function() {
  var JSE, JSEArray, JSEDate, JSENumber, JSEObject, JSESelect, JSEString, JSEText, JSEValue, generateJSEItem, iced, issue_scheme, __iced_k,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = function() {};

  JSEValue = (function() {

    JSEValue.name = 'JSEValue';

    function JSEValue(optional, title) {
      this.optional = optional;
      this.title = title;
    }

    JSEValue.prototype.setvalue = function(value) {
      if (this.validate(value)) return this.value = value;
    };

    JSEValue.prototype.validate = function(value) {
      if (!(this.optional || (value != null))) {
        throw "JSE: Required mandatory value";
      }
      return (value != null) && value !== 'undefined';
    };

    JSEValue.prototype.getvalue = function() {
      return this.value;
    };

    return JSEValue;

  })();

  JSEString = (function(_super) {

    __extends(JSEString, _super);

    JSEString.name = 'JSEString';

    function JSEString(optional, title) {
      JSEString.__super__.constructor.call(this, optional, title);
    }

    JSEString.prototype.render = function(jselector) {
      jselector.append("<input type='text' class='input-xlarge' id='input01' placeholder='Enter something'>");
      this.el = jselector.find("input:last");
      if (this.value != null) return this.el.val(this.value);
    };

    JSEString.prototype.validate = function(obj) {
      if (JSEString.__super__.validate.call(this, obj)) {
        if (!(typeof obj === "string")) {
          throw "JSE: Expected String value";
        } else {
          return true;
        }
      }
      return false;
    };

    JSEString.prototype.getvalue = function() {
      if (this.el) {
        if (this.el.val() !== "") {
          return this.el.val();
        } else {
          return null;
        }
      } else {
        return this.value;
      }
    };

    return JSEString;

  })(JSEValue);

  JSEText = (function(_super) {

    __extends(JSEText, _super);

    JSEText.name = 'JSEText';

    function JSEText() {
      return JSEText.__super__.constructor.apply(this, arguments);
    }

    JSEText.prototype.render = function(jselector) {
      jselector.append("<textarea class='input-xlarge' rows='3' placeholder='Enter something'>");
      this.el = jselector.find("textarea:last");
      if (this.value != null) return this.el.val(this.value);
    };

    return JSEText;

  })(JSEString);

  JSEDate = (function(_super) {

    __extends(JSEDate, _super);

    JSEDate.name = 'JSEDate';

    function JSEDate() {
      return JSEDate.__super__.constructor.apply(this, arguments);
    }

    JSEDate.prototype.render = function(jselector) {
      jselector.append("<input data-date-format='dd/mm/yyyy' value='01/01/2012' type='text' class='input-xlarge'>");
      this.el = jselector.find("input:last");
      this.el.datepicker({});
      if (this.value != null) return this.el.val(this.value);
    };

    return JSEDate;

  })(JSEString);

  JSESelect = (function(_super) {

    __extends(JSESelect, _super);

    JSESelect.name = 'JSESelect';

    function JSESelect(optional, title, options) {
      this.options = options;
      JSESelect.__super__.constructor.call(this, optional, title);
    }

    JSESelect.prototype.render = function(jselector) {
      var display, option, val, _i, _len, _ref;
      jselector.append("<select></select>");
      this.el = jselector.find("select:last");
      _ref = this.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        val = option[0], display = option[1];
        this.el.append("<option value='" + val + "'>" + display + "</option>");
      }
      if (this.value != null) return this.el.select(this.value);
    };

    return JSESelect;

  })(JSEString);

  JSENumber = (function(_super) {

    __extends(JSENumber, _super);

    JSENumber.name = 'JSENumber';

    function JSENumber(optional, title) {
      JSENumber.__super__.constructor.call(this, optional, title);
    }

    JSENumber.prototype.render = function(jselector) {
      jselector.append("<input type='text' class='input-xlarge' id='input01' placeholder='Enter something'>");
      this.el = jselector.find("input:last");
      if (this.value != null) return this.el.val(this.value);
    };

    JSENumber.prototype.validate = function(obj) {
      if (JSENumber.__super__.validate.call(this, obj)) {
        if (!(typeof obj === "number")) {
          throw "JSE: Expected Number value";
        } else {
          return true;
        }
      }
      return false;
    };

    JSENumber.prototype.getvalue = function() {
      if (this.el) {
        if (this.el.val() !== "") {
          return parseInt(this.el.val(), 10);
        } else {
          return null;
        }
      } else {
        return this.value;
      }
    };

    return JSENumber;

  })(JSEValue);

  JSEObject = (function(_super) {

    __extends(JSEObject, _super);

    JSEObject.name = 'JSEObject';

    function JSEObject(fields, optional, title) {
      var tuple, _i, _len;
      console.log("new object");
      JSEObject.__super__.constructor.call(this, optional, title);
      this.children = {};
      this.fieldnames = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
          tuple = fields[_i];
          _results.push(tuple.name);
        }
        return _results;
      })();
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        tuple = fields[_i];
        this.children[tuple.name] = generateJSEItem(tuple.props);
      }
    }

    JSEObject.prototype.render = function(jselector) {
      var fieldname, title, _i, _len, _ref, _results;
      jselector.append("<form class='well form-horizontal'></form>");
      jselector = jselector.find("form:last");
      _ref = this.fieldnames;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fieldname = _ref[_i];
        title = this.children[fieldname].title;
        jselector.append("<div class='control-group'>                                               <label class='control-label'>" + title + "</label>                                               <div class='controls'>                                               </div>                                          </div>");
        _results.push(this.children[fieldname].render(jselector.find(".control-group:last > .controls")));
      }
      return _results;
    };

    JSEObject.prototype.validate = function(obj) {
      if (JSEObject.__super__.validate.call(this, obj)) {
        if (!(typeof obj === "object")) {
          throw "JSE: Expected Object value";
        } else {
          return true;
        }
      }
      return false;
    };

    JSEObject.prototype.setvalue = function(obj) {
      var fieldname, value, _i, _len, _ref, _results;
      if (this.validate(obj)) {
        _ref = this.fieldnames;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fieldname = _ref[_i];
          value = obj[fieldname];
          _results.push(this.children[fieldname].setvalue(value));
        }
        return _results;
      }
    };

    JSEObject.prototype.getvalue = function() {
      var fieldname, r, _i, _len, _ref;
      r = {};
      _ref = this.fieldnames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fieldname = _ref[_i];
        if (this.children[fieldname].getvalue() != null) {
          r[fieldname] = this.children[fieldname].getvalue();
        }
      }
      return r;
    };

    return JSEObject;

  })(JSEValue);

  JSEArray = (function(_super) {

    __extends(JSEArray, _super);

    JSEArray.name = 'JSEArray';

    function JSEArray(fielddesc, optional, title) {
      this.fielddesc = fielddesc;
      console.log("new array");
      JSEArray.__super__.constructor.call(this, optional, title);
      this.children = [];
    }

    JSEArray.prototype.render = function(jselector) {
      var child, _i, _len, _ref,
        _this = this;
      jselector.append("<div></div>                                  <a class='additem btn btn-mini'><i class='icon-plus'></i>New item</a>");
      this.el = jselector.find("div:last");
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.render(this.el);
      }
      return jselector.find(".additem:last").click(function() {
        child = generateJSEItem(_this.fielddesc);
        _this.children.push(child);
        return child.render(_this.el);
      });
    };

    JSEArray.prototype.validate = function(obj) {
      if (JSEArray.__super__.validate.call(this, obj)) {
        if (!(typeof obj === "object")) {
          throw "JSE: Expected Array value";
        } else {
          return true;
        }
      }
      return false;
    };

    JSEArray.prototype.setvalue = function(obj) {
      var child, value, _i, _len, _results;
      if (this.validate(obj)) {
        this.children = [];
        _results = [];
        for (_i = 0, _len = obj.length; _i < _len; _i++) {
          value = obj[_i];
          child = generateJSEItem(this.fielddesc);
          child.setvalue(value);
          _results.push(this.children.push(child));
        }
        return _results;
      }
    };

    JSEArray.prototype.getvalue = function() {
      var el, _i, _len, _ref, _results;
      _ref = this.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        if (el.getvalue() != null) _results.push(el.getvalue());
      }
      return _results;
    };

    return JSEArray;

  })(JSEValue);

  generateJSEItem = function(fielddesc) {
    var children, eltype, optional, options, title, type;
    type = fielddesc["type"];
    optional = fielddesc["optional"] === true;
    children = fielddesc["children"];
    eltype = fielddesc["eltype"];
    title = fielddesc["title"];
    options = fielddesc["options"];
    console.log("type: " + type);
    switch (type) {
      case "obj":
        return new JSEObject(children, optional, title);
      case "num":
        return new JSENumber(optional, title);
      case "str":
        return new JSEString(optional, title);
      case "select":
        return new JSESelect(optional, title, options);
      case "text":
        return new JSEText(optional, title);
      case "date":
        return new JSEDate(optional, title);
      case "arr":
        return new JSEArray(eltype, optional, title);
      default:
        throw "JSE: unknown type " + type;
    }
  };

  JSE = (function() {

    JSE.name = 'JSE';

    function JSE(selector, scheme) {
      this.selector = selector;
      this.scheme = scheme;
      this.jse = generateJSEItem(this.scheme);
      this.jse.render(this.selector);
    }

    JSE.prototype.setvalue = function(value) {
      return this.jse.setvalue(value);
    };

    JSE.prototype.getvalue = function() {
      return this.jse.getvalue();
    };

    JSE.prototype.render = function() {
      return this.jse.render(this.selector);
    };

    return JSE;

  })();

  window.JSE = JSE;

  issue_scheme = {
    "type": "obj",
    "children": [
      {
        "name": "slug",
        "props": {
          "type": "str",
          "title": "\u05de\u05d6\u05d4\u05d4"
        }
      }, {
        "name": "book",
        "props": {
          "type": "str",
          "title": "\u05d3\u05d5\"\u05d7"
        }
      }, {
        "name": "chapter",
        "props": {
          "type": "str",
          "title": "\u05e4\u05e8\u05e7"
        }
      }, {
        "name": "subchapter",
        "props": {
          "optional": true,
          "type": "str",
          "title": "\u05e1\u05e2\u05d9\u05e3"
        }
      }, {
        "name": "subject",
        "props": {
          "type": "str",
          "title": "\u05db\u05d5\u05ea\u05e8\u05ea"
        }
      }, {
        "name": "recommendation",
        "props": {
          "type": "text",
          "title": "\u05e4\u05d9\u05e8\u05d5\u05d8"
        }
      }, {
        "name": "result_metric",
        "props": {
          "type": "text",
          "title": "\u05de\u05d8\u05e8\u05d4"
        }
      }, {
        "name": "budget",
        "props": {
          "type": "obj",
          "children": [
            {
              "name": "description",
              "props": {
                "optional": true,
                "type": "text",
                "title": "\u05ea\u05d9\u05d0\u05d5\u05e8"
              }
            }, {
              "name": "millions",
              "props": {
                "type": "num",
                "title": "\u05e1\u05db\u05d5\u05dd \u05d1\u05de\u05d9\u05dc\u05d9\u05d5\u05e0\u05d9\u05dd"
              }
            }, {
              "name": "year_span",
              "props": {
                "type": "num",
                "title": "\u05e2\u05dc \u05e4\u05e0\u05d9 \u05db\u05de\u05d4 \u05e9\u05e0\u05d9\u05dd"
              }
            }
          ],
          "title": "\u05e2\u05dc\u05d5\u05ea \u05db\u05e1\u05e4\u05d9\u05ea"
        }
      }, {
        "name": "responsible_authority",
        "props": {
          "type": "str",
          "title": "\u05d2\u05d5\u05e8\u05dd \u05d0\u05d7\u05e8\u05d0\u05d9"
        }
      }, {
        "name": "tags",
        "props": {
          "type": "arr",
          "eltype": {
            "type": "str"
          },
          "title": "\u05ea\u05d2\u05d9\u05d5\u05ea"
        }
      }, {
        "name": "description",
        "props": {
          "type": "text",
          "optional": true,
          "title": "\u05d3\u05d1\u05e8\u05d9 \u05d4\u05e1\u05d1\u05e8"
        }
      }, {
        "name": "implementation_status",
        "props": {
          "type": "select",
          "options": [["NEW", "\u05d8\u05e8\u05dd \u05d4\u05ea\u05d7\u05d9\u05dc"], ["STUCK", "\u05ea\u05e7\u05d5\u05e2"], ["IN_PROGRESS", "\u05d1\u05ea\u05d4\u05dc\u05d9\u05da"], ["FIXED", "\u05d9\u05d5\u05e9\u05dd \u05d1\u05de\u05dc\u05d5\u05d0\u05d5"], ["WORKAROUND", "\u05d9\u05d5\u05e9\u05dd \u05d7\u05dc\u05e7\u05d9\u05ea"], ["IRRELEVANT", "\u05db\u05d1\u05e8 \u05dc\u05d0 \u05e8\u05dc\u05d5\u05d5\u05e0\u05d8\u05d9"]],
          "title": "\u05e1\u05d8\u05d8\u05d5\u05e1 \u05d9\u05d9\u05e9\u05d5\u05dd"
        }
      }, {
        "name": "implementation_status_text",
        "props": {
          "type": "text",
          "optional": true,
          "title": "\u05d4\u05e1\u05d1\u05e8 \u05dc\u05e1\u05d8\u05d8\u05d5\u05e1 \u05d4\u05d9\u05d9\u05e9\u05d5\u05dd"
        }
      }, {
        "name": "timeline",
        "props": {
          "type": "arr",
          "eltype": {
            "type": "obj",
            "children": [
              {
                "name": "milestone_name",
                "props": {
                  "type": "str",
                  "title": "\u05e9\u05dd \u05d0\u05d1\u05df \u05d4\u05d3\u05e8\u05da"
                }
              }, {
                "name": "description",
                "props": {
                  "optional": true,
                  "type": "text",
                  "title": "\u05ea\u05d9\u05d0\u05d5\u05e8 \u05de\u05e4\u05d5\u05e8\u05d8"
                }
              }, {
                "name": "due_date",
                "props": {
                  "optional": true,
                  "type": "date",
                  "title": "\u05ea\u05d0\u05e8\u05d9\u05da \u05d9\u05e2\u05d3 \u05de\u05ea\u05d5\u05db\u05e0\u05df"
                }
              }, {
                "name": "action_date",
                "props": {
                  "optional": true,
                  "type": "date",
                  "title": "\u05ea\u05d0\u05e8\u05d9\u05da \u05d1\u05d9\u05e6\u05d5\u05e2 \u05d1\u05e4\u05d5\u05e2\u05dc"
                }
              }, {
                "name": "links",
                "props": {
                  "type": "arr",
                  "eltype": {
                    "type": "obj",
                    "children": [
                      {
                        "name": "url",
                        "props": {
                          "type": "str",
                          "title": "URL"
                        }
                      }, {
                        "name": "description",
                        "props": {
                          "type": "str",
                          "title": "\u05ea\u05d9\u05d0\u05d5\u05e8"
                        }
                      }
                    ]
                  },
                  "title": "\u05e7\u05d9\u05e9\u05d5\u05e8\u05d9\u05dd"
                }
              }
            ],
            "title": "\u05d0\u05d1\u05df \u05d3\u05e8\u05da"
          },
          "title": "\u05dc\u05d5\u05d7 \u05d6\u05de\u05e0\u05d9\u05dd"
        }
      }
    ]
  };

  $(function() {
    var J;
    J = new JSE($("#body"), issue_scheme);
    $("#results-button").click(function() {
      var newval;
      newval = J.getvalue();
      try {
        J.setvalue(newval);
        $("#errors").html("&nbsp;");
        $("#saver input").val(JSON.stringify(newval));
        $("#saver").submit();
      } catch (e) {
        $("#errors").html(e);
      }
      $("#body").html("");
      return J.render();
    });
    window.onhashchange = function(e) {
      var data, hash, ___iced_passed_deferral, __iced_deferrals,
        _this = this;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      hash = window.location.hash;
      hash = hash.slice(1, hash.length + 1 || 9e9);
      $("#saver").attr("action", "/api/" + hash);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: 'jse.iced',
          funcname: 'onhashchange'
        });
        $.getJSON("http://127.0.0.1:5000/api/" + hash, (__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return data = arguments[0];
            };
          })(),
          lineno: 231
        })));
        __iced_deferrals._fulfill();
      })(function() {
        J.setvalue(data);
        $("#body").html("");
        return J.render();
      });
    };
    return window.onhashchange();
  });

}).call(this);
